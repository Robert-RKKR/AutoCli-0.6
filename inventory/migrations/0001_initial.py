# Generated by Django 3.2.13 on 2022-05-16 17:46

import autocli.basemodel.validators
from django.db import migrations, models
import django.db.models.deletion
import inventory.validators


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Credential',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, help_text='Model create date.', verbose_name='Created')),
                ('updated', models.DateTimeField(auto_now=True, help_text='Model last update date.', verbose_name='Updated')),
                ('deleted', models.BooleanField(default=False)),
                ('root', models.BooleanField(default=False, help_text='Model with root option cannot be deleted.', verbose_name='Root')),
                ('active', models.BooleanField(default=True, help_text='Status of Model object.', verbose_name='Active')),
                ('name', models.CharField(error_messages={'blank': 'Name field is mandatory.', 'invalid': 'Enter the correct name value. It must contain 3 to 32 digits, letters or special characters -, _ or spaces.', 'null': 'Name field is mandatory.', 'unique': 'Object with this name already exists.'}, help_text='Model name.', max_length=32, unique=True, validators=[autocli.basemodel.validators.NameValueValidator()], verbose_name='Name')),
                ('description', models.CharField(default='Model description.', error_messages={'invalid': 'Enter the correct description value. It must contain 8 to 256 digits, letters and special characters -, _, . or spaces.'}, help_text='Model description.', max_length=256, validators=[autocli.basemodel.validators.DescriptionValueValidator()], verbose_name='Description')),
                ('username', models.CharField(error_messages={'blank': 'Username field is mandatory.', 'invalid': 'Enter the correct username value.', 'null': 'Username field is mandatory.'}, help_text='Local / remote user name.', max_length=64, verbose_name='Username')),
                ('password', models.CharField(blank=True, help_text='Local / remote user password.', max_length=64, null=True, verbose_name='Password')),
                ('ico', models.IntegerField(choices=[(0, 'static/ico/model/colors/switch.svg'), (1, 'static/ico/model/colors/border_router.svg'), (2, 'static/ico/model/colors/chassis.svg'), (3, 'static/ico/model/colors/console.svg'), (4, 'static/ico/model/colors/firewall.svg'), (5, 'static/ico/model/colors/router.svg'), (6, 'static/ico/model/colors/router_firewall.svg'), (7, 'static/ico/model/colors/router_wifi_1.svg'), (8, 'static/ico/model/colors/router_wifi_2.svg'), (9, 'static/ico/model/colors/stack.svg'), (10, 'static/ico/model/colors/stack_firewall_1.svg'), (11, 'static/ico/model/colors/stack_firewall_2.svg'), (12, 'static/ico/model/colors/stack_firewall_2.svg'), (13, 'static/ico/model/colors/stack_firewall_2.svg')], default=0, help_text='Color graphic representation.', verbose_name='Color')),
            ],
            options={
                'verbose_name': 'Credential',
                'verbose_name_plural': 'Credentials',
            },
        ),
        migrations.CreateModel(
            name='Device',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, help_text='Model create date.', verbose_name='Created')),
                ('updated', models.DateTimeField(auto_now=True, help_text='Model last update date.', verbose_name='Updated')),
                ('deleted', models.BooleanField(default=False)),
                ('root', models.BooleanField(default=False, help_text='Model with root option cannot be deleted.', verbose_name='Root')),
                ('active', models.BooleanField(default=True, help_text='Status of Model object.', verbose_name='Active')),
                ('name', models.CharField(error_messages={'blank': 'Name field is mandatory.', 'invalid': 'Enter the correct name value. It must contain 3 to 32 digits, letters or special characters -, _ or spaces.', 'null': 'Name field is mandatory.', 'unique': 'Object with this name already exists.'}, help_text='Model name.', max_length=32, unique=True, validators=[autocli.basemodel.validators.NameValueValidator()], verbose_name='Name')),
                ('description', models.CharField(default='Model description.', error_messages={'invalid': 'Enter the correct description value. It must contain 8 to 256 digits, letters and special characters -, _, . or spaces.'}, help_text='Model description.', max_length=256, validators=[autocli.basemodel.validators.DescriptionValueValidator()], verbose_name='Description')),
                ('hostname', models.CharField(error_messages={'blank': 'IP / DNS name field is mandatory.', 'invalid': 'Enter a valid IP address or DNS resolvable hostname. It must contain 4 to 32 digits, letters and special characters -, _, . or spaces.', 'null': 'IP / DNS name field is mandatory.', 'unique': 'Device with this hostname already exists.'}, help_text='Valid IP address or domain name.', max_length=32, unique=True, validators=[inventory.validators.HostnameValueValidator()], verbose_name='Hostname')),
                ('device_type', models.IntegerField(choices=[(0, 'Autodetect'), (1, 'Cisco IOS'), (2, 'Cisco XE'), (3, 'Cisco XR'), (4, 'Cisco NXOS'), (5, 'Cisco ASA'), (6, 'Cisco WLC'), (7, 'FortiNet OS'), (99, 'Unsupported')], default=0, help_text='Type of network device system.', verbose_name='Device type')),
                ('ico', models.IntegerField(choices=[(0, 'static/ico/model/colors/switch.svg'), (1, 'static/ico/model/colors/border_router.svg'), (2, 'static/ico/model/colors/chassis.svg'), (3, 'static/ico/model/colors/console.svg'), (4, 'static/ico/model/colors/firewall.svg'), (5, 'static/ico/model/colors/router.svg'), (6, 'static/ico/model/colors/router_firewall.svg'), (7, 'static/ico/model/colors/router_wifi_1.svg'), (8, 'static/ico/model/colors/router_wifi_2.svg'), (9, 'static/ico/model/colors/stack.svg'), (10, 'static/ico/model/colors/stack_firewall_1.svg'), (11, 'static/ico/model/colors/stack_firewall_2.svg'), (12, 'static/ico/model/colors/stack_firewall_2.svg'), (13, 'static/ico/model/colors/stack_firewall_2.svg')], default=0, help_text='Color graphic representation.', verbose_name='Color')),
                ('ssh_port', models.IntegerField(default=22, help_text='SSH protocol port number.', verbose_name='SSH port')),
                ('https_port', models.IntegerField(default=443, help_text='HTTPS protocol port number.', verbose_name='HTTPS port')),
                ('ssh_status', models.BooleanField(default=False, help_text='Status of SSH connection to the device.', verbose_name='SSH status')),
                ('https_status', models.BooleanField(default=False, help_text='Status of HTTPS connection to the device.', verbose_name='HTTPS status')),
                ('secret', models.CharField(blank=True, help_text='Network device secret password.', max_length=64, null=True, verbose_name='Secret')),
                ('token', models.CharField(blank=True, help_text='Network device API key.', max_length=128, null=True, verbose_name='API token')),
                ('certificate', models.BooleanField(default=False, help_text='Check network device certificate during HTTPS connection.', verbose_name='Certificate')),
                ('credential', models.ForeignKey(blank=True, help_text='Credential needed to establish SSH / HTTPS connection.', null=True, on_delete=django.db.models.deletion.PROTECT, to='inventory.credential', verbose_name='Credential')),
            ],
            options={
                'verbose_name': 'Device',
                'verbose_name_plural': 'Devices',
            },
        ),
        migrations.CreateModel(
            name='Folder',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, help_text='Model create date.', verbose_name='Created')),
                ('updated', models.DateTimeField(auto_now=True, help_text='Model last update date.', verbose_name='Updated')),
                ('deleted', models.BooleanField(default=False)),
                ('root', models.BooleanField(default=False, help_text='Model with root option cannot be deleted.', verbose_name='Root')),
                ('active', models.BooleanField(default=True, help_text='Status of Model object.', verbose_name='Active')),
                ('name', models.CharField(error_messages={'blank': 'Name field is mandatory.', 'invalid': 'Enter the correct name value. It must contain 3 to 32 digits, letters or special characters -, _ or spaces.', 'null': 'Name field is mandatory.', 'unique': 'Object with this name already exists.'}, help_text='Model name.', max_length=32, unique=True, validators=[autocli.basemodel.validators.NameValueValidator()], verbose_name='Name')),
                ('description', models.CharField(default='Model description.', error_messages={'invalid': 'Enter the correct description value. It must contain 8 to 256 digits, letters and special characters -, _, . or spaces.'}, help_text='Model description.', max_length=256, validators=[autocli.basemodel.validators.DescriptionValueValidator()], verbose_name='Description')),
                ('ico', models.IntegerField(choices=[(0, 'static/ico/model/colors/switch.svg'), (1, 'static/ico/model/colors/border_router.svg'), (2, 'static/ico/model/colors/chassis.svg'), (3, 'static/ico/model/colors/console.svg'), (4, 'static/ico/model/colors/firewall.svg'), (5, 'static/ico/model/colors/router.svg'), (6, 'static/ico/model/colors/router_firewall.svg'), (7, 'static/ico/model/colors/router_wifi_1.svg'), (8, 'static/ico/model/colors/router_wifi_2.svg'), (9, 'static/ico/model/colors/stack.svg'), (10, 'static/ico/model/colors/stack_firewall_1.svg'), (11, 'static/ico/model/colors/stack_firewall_2.svg'), (12, 'static/ico/model/colors/stack_firewall_2.svg'), (13, 'static/ico/model/colors/stack_firewall_2.svg')], default=0, help_text='Color graphic representation.', verbose_name='Color')),
                ('ssh_port', models.IntegerField(default=22, help_text='Folder default SSH protocol port number.', verbose_name='Default SSH port')),
                ('https_port', models.IntegerField(default=443, help_text='Folder default HTTPS protocol port number.', verbose_name='Default HTTPS port')),
                ('secret', models.CharField(blank=True, help_text='Folder default network device secret password.', max_length=64, null=True, verbose_name='Default secret')),
                ('certificate', models.BooleanField(default=False, help_text='Folder default certificate check status.', verbose_name='Default certificate')),
                ('credential', models.ForeignKey(blank=True, help_text='Folder default credential needed to establish SSH / HTTPS connection.', null=True, on_delete=django.db.models.deletion.PROTECT, to='inventory.credential', verbose_name='Default credential')),
                ('devices', models.ManyToManyField(blank=True, help_text='All devices that belongs to current folder.', to='inventory.Device', verbose_name='Devices')),
                ('root_folder', models.ForeignKey(blank=True, help_text='The parent folder to witch the current folder belongs.', null=True, on_delete=django.db.models.deletion.PROTECT, to='inventory.folder', verbose_name='Root folder')),
            ],
            options={
                'verbose_name': 'Folder',
                'verbose_name_plural': 'Folders',
            },
        ),
    ]
